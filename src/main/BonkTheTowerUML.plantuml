@startuml BTT_TD_Diagram
class BonkTheTowerTD {

}

BonkTheTowerTD --|> YeagerGame
BonkTheTowerTD <-- TitleScreen
BonkTheTowerTD <-- MapSelector
BonkTheTowerTD <-- GameScreen
BonkTheTowerTD <-- FinalScreen

abstract class YeagerGame #EE66B1 {

}

class GameScreen {
+earnedPoints : int
+coinBalance : int
}

GameScreen <-- ShopTileMap
GameScreen <-- LevelTileMap
GameScreen <-- Counter

class TitleScreen {

}

class TextEntity {

}

class MapSelector {

}

interface TileMapContainer #EE66B1{

}

abstract class TileMap #EE66B1 {

}

TileMapContainer <-- TitleScreen
TileMapContainer <-- GameScreen
TileMapContainer <-- MapSelector
TileMapContainer <-- FinalScreen

TileMap <|-- ShopTileMap

class FinalScreen {

}

abstract class DynamicScene #EE66B1 {

}

GameScreen --|> DynamicScene
TitleScreen --|> DynamicScene
MapSelector --|> DynamicScene
FinalScreen --|> DynamicScene

class RoundExecutor {

}

RoundExecutor --> Enemy
RoundExecutor --> GameScreen

class LevelTileMap {
+setupEntities() : void
+defineMap() : int[][]
}

LevelTileMap --|> TileMap
LevelTileMap --> Button

enum Screen {
    TITLE
    MAP_CHOOSER
    GAME
    FINAL
}

enum CurrentMap {
    ONE
    TWO
    THREE
}

enum Round {
    ONE
    TWO
    THREE
    FOUR
    FIVE
    SIX
    SEVEN
    EIGHT
    NINE
    TEN
}

enum Target {
    FIRST
    LAST
    CLOSE
    STRONGEST
}

abstract class Button {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void

}

Button --> MouseExitListener
Button --> MouseEnterListener
Button --> MouseButtonPressedListener
Button --|> TextEntity

Button <|.. QuitButton
Button <|.. SceneSwitchButton
Button <|.. BuyItem
Button <|.. SellItem
Button <|.. ChangeRoundState

interface MouseButtonPressedListener #EE66B1 {

}

interface MouseEnterListener #EE66B1 {

}

interface MouseExitListener #EE66B1 {

}

class TextEntity #EE66B1 {

}

class SceneSwitchButton {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class ChangeRoundState {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class BuyItem {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class SellItem {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class QuitButton {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class ImageDisplayer {

}

ImageDisplayer --|> SpriteEntity

class Counter {

}

Counter --|> TextEntity

class ShopTileMap {
+setupEntities() : void
+defineMap() : int[][]
}

ShopTileMap <|-- Tower
ShopTileMap --> Button


abstract class Tower {
+getPrice() : void
+checkEnoughMoney() : boolean
+setPosition() : void
+getPosition() : void
+selectTarget() : void
+buyItem() : void

+drawTower() : void
}

class Archer {
-price : float
-attackSpeed : int
-attackRange : float
-attackDamage : int

+drawTower() : void
}

class Hitman {
-price : float
-attackSpeed : int
-attackRange : float
-attackDamage : int

+drawTower() : void
}

class Freezer {
-price : float
-attackSpeed : int
-attackRange : float
-attackDamage : int

+drawTower() : void
}

Tower <|.. Archer
Tower <|.. Hitman
Tower <|.. Freezer

Tower --|> SpriteEntity
Enemy --|> DynamicSpriteEntity
Projectile --|> DynamicSpriteEntity

abstract class SpriteEntity #EE66B1 {

}

abstract class DynamicSpriteEntity #EE66B1 {

}

class Projectile {

}

interface Collider #EE66B1{
}

Projectile --> Collider
Projectile --> Tower

class Arrow {

}

class Bullet {

}

class Ice {

}

Projectile <-- Arrow
Projectile <-- Bullet
Projectile <-- Ice


abstract class Enemy {
-movementSpeed : int
-hitPoints : int

+drawEnemy() : void
+getMovement() : void
+startMovement() : void
}

interface Collided #EE66B1{

}

Enemy --> Collided

class BabyCoot {
+drawEnemy() : void
}

class DerpyCoot {
+drawEnemy() : void
}

class MamaCoot {
+drawEnemy() : void
}

class FastCoot {
+drawEnemy() : void
}

class ThickCoot {
+drawEnemy() : void
}

Enemy <|.. BabyCoot
Enemy <|.. DerpyCoot
Enemy <|.. MamaCoot
Enemy <|.. FastCoot
Enemy <|.. ThickCoot

@enduml