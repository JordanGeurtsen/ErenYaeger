@startuml BTT_TD_Diagram
class BonkTheTowerTD {

}

BonkTheTowerTD .|> YeagerGame
BonkTheTowerTD <-- TitleScreen
BonkTheTowerTD <-- GameScreen
BonkTheTowerTD <-- FinalScreen

abstract class YeagerGame #EE66B1 {

}

class GameScreen {
..Static..
+ {static} points : int
..Private..
- bonkTheTowerTD : BonkTheTowerTD
- levelTileMap : LevelTileMap
- roundDefiner : RoundDefiner
- nextRoundButton : NextRoundButton
- towerPrice : int
- newTowerCoordinates : Coordinate2D
- enemyListNr : int
- enemySpawnTimer : int
..Public..
+ enemyList : ArrayList<Enemy>
+ spawnedEnemyList : ArrayList<Enemy>
+ towers : ArrayList<Tower>
+ currentRound : RoundDefiner
+ coinCounter : Counter
+ pointCounter : Counter
+ liveCounter : Counter
+ roundCounter : Counter
+ coins : int
+ lives : int
+ blockSize : int
+ nextRound : boolean

--
+ GameScreen(bonkTheTowerTD : BonkTheTowerTD)
+ spawnEnemy() : void
+ changeTileMap() : void
+ resetStartingVariables() : void
+ gameOver() : void
+ checkEnoughMoney(towerName : String) : boolean
+ addNewTower(towerSelectedName : String) : void
+ resetVariablesPlacingTower(blockNrWidth : int, blockNrHeight : int) : void
+ placeTower(mouseCoordinates : Coordinate2D) : void
}

GameScreen <-- LevelTileMap
GameScreen <-- Counter

EntitySpawnerContainer <|.. GameScreen
UpdateExposer <|.. GameScreen
MouseButtonReleasedListener <|.. GameScreen
TileMapContainer <|.. GameScreen

interface EntitySpawnerContainer #EE66B1 {
}

interface UpdateExposer #EE66B1 {
}

interface MouseButtonReleasedListener #EE66B1 {
}

class TitleScreen {
- bonkTheTowerTD : BonkTheTowerTD

+ TitleScreen(bonkTheTowerTD : BonkTheTowerTD)
}

class TextEntity {

}

interface TileMapContainer #EE66B1{

}

abstract class TileMap #EE66B1 {

}


class FinalScreen {
- bonkTheTowerTD : BonkTheTowerTD
- {static} finalMessage : String

+ Finalscreen(bonkTheTowerTD : BonkTheTowerTD)
+ {static} setFinalMessage(finalMessage : String) : void
}

abstract class DynamicScene #EE66B1 {

}

GameScreen ..|> DynamicScene
TitleScreen ..|> DynamicScene
FinalScreen ..|> DynamicScene

class RoundDefiner {
- gameScreen : GameScreen
- startCoordinates : Coordinate2D

+ RoundDefiner(gameScreen : GameScreen)
+ setEnemies(round : Round)

}

GameScreen --> Enemy
RoundDefiner --> GameScreen

class LevelTileMap {
+ levelMap : int[][]

+ LevelTileMap()
+ changeTile(blockNrWidth : int, blockNrHeight : int, entityIdentifier : int) : void
+ freeSpace(blockNrWidth : int, blockNrHeight : int) : boolean
+ changeTileMap(oldIdentifier : int, newIdentifier : int) : void
}

class TowerGround {
+ TowerGround(initialLocation : Coordinate2D, size : Size, resource : String)
}

class SelectGround{
+ SelectGround(initialLocation : Coordinate2D, size : Size, resource : String)
}

class Water {
+ Water(initialLocation : Coordinate2D, size : Size, resource : String)
}

class Grass {
+ Grass(initialLocation : Coordinate2D, size : Size, resource : String)
}

SpriteEntity <-- TowerGround
SpriteEntity <-- SelectGround
SpriteEntity <-- Water
SpriteEntity <-- Grass

LevelTileMap <-- Grass
LevelTileMap <-- Water
LevelTileMap <-- SelectGround
LevelTileMap <-- TowerGround
LevelTileMap ..|> TileMap

enum TileIdentifier {
..Constants..
GRASS (1)
WATER (2)
TOWERGROUND (3)
SELECTGROUND (4)
..Private..
- id : int
--
+ TileIdentifier(id : int)
+ getId() : int
}

abstract class Button {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void

}

Button .|> MouseExitListener
Button .|> MouseEnterListener
Button .|> MouseButtonPressedListener
Button .|> TextEntity

Button <|.. QuitButton
Button <|.. SceneSwitchButton
Button <|.. BuyButton
Button <|.. NextRoundButton
Button <|.. ChangeRoundState

interface MouseButtonPressedListener #EE66B1 {

}

interface MouseEnterListener #EE66B1 {

}

interface MouseExitListener #EE66B1 {

}

class TextEntity #EE66B1 {

}

class SceneSwitchButton {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class ChangeRoundState {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class BuyButton {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class NextRoundButton {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class QuitButton {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class Counter {

}

Counter .|> TextEntity

abstract class Tower {
+getPrice() : void
+checkEnoughMoney() : boolean
+setPosition() : void
+getPosition() : void
+selectTarget() : void
+buyItem() : void

+drawTower() : void
}

class Archer {
-price : float
-attackSpeed : int
-attackRange : float
-attackDamage : int

+drawTower() : void
}

class Hitman {
-price : float
-attackSpeed : int
-attackRange : float
-attackDamage : int

+drawTower() : void
}

class Freezer {
-price : float
-attackSpeed : int
-attackRange : float
-attackDamage : int

+drawTower() : void
}

Tower <|.. Archer
Tower <|.. Hitman
Tower <|.. Freezer

Tower ..|> SpriteEntity
Enemy ..|> DynamicSpriteEntity
Projectile .|> DynamicSpriteEntity

abstract class SpriteEntity #EE66B1 {

}

abstract class DynamicSpriteEntity #EE66B1 {

}

abstract class ProjectileSpawner {
}

class ArrowSpawner {

}

class BulletSpawner {
}

ProjectileSpawner --> Tower
ProjectileSpawner <-- ArrowSpawner
ProjectileSpawner <-- BulletSpawner

class Projectile {
- gameScreen : gameScreen
- shootingTower : Tower

+ Projectile(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen, shootingTower : Tower, size : Size

}

interface Collider #EE66B1{
}

interface SceneBorderCrossingWatcher #EE66B1 {
}

Projectile ..|> Collided
Projectile ..|> SceneBorderCrossingWatcher

class Arrow {
+ Arrow(initialLocation : Coordinate2D, shootAngle : double, gameScreen : GameScreen, shootingTower : Tower)
}

class Bullet {
+ Bullet(initialLocation : Coordinate2D, shootAngle : double, gameScreen : GameScreen, shootingTower : Tower)

}

Projectile <-- Arrow
Projectile <-- Bullet

abstract class Enemy {
..Public..
+ pathStep : PathStep
..Protected..
# gameScreen : GameScreen
# mapProgress : double
..Private..
- initialLocation : Coordinate2D

--
+ Enemy(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
+ getInitialLocation() : Coordinate2D
+ setPathStep(newPathStep PathStep) : void
+ getPathStep() : PathStep
+ enemyPastBorder(enemy : Enemy, damage : int) : void
+ updateWalkedDistance(distanceWalked : double) : void
+ setMapProgress(mapProgress : double) : void
+ getMapProgress() : double
+ pathLimit(tile : int) : double
+ enemyPath() : void

..Abstract..
+ {abstract} setMovementSpeed(movementSpeed : MovementSpeed) : void
+ {abstract} getMovementSpeed() : double
+ {abstract} setHealth(newHealth double) : void
+ {abstract} getHealth() : int
+ {abstract} getDamage() : int
}

interface Collided #EE66B1{

}

Enemy ..|> Collided

class BabyCoot {
- speed : double
- health : int

+ BabyCoot(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
}

class DerpyCoot {
- speed : double
- health : int

+ DerpyCoot(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)

}

class MamaCoot {
- speed : double
- health : int
- babyCootSpawner : BabyCootSpawner

+ MamaCoot(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
+ getBabyCootSpawner() : BabyCootSpawner
}

MamaCoot <-- BabyCootSpawner

class BabyCootSpawner {
- initialLocation : Coordinate2D
- gameScreen : GameScreen
- mamaCoot : Enemy
- needToSpawn : boolean
--
..Public..
+ setNeedToSpawn(state : boolean) : void
..Protected..
# BabyCootSpawner(intervalInMs : long, initialLocation : Coordinate2D, gameScreen : GameScreen, mamaCoot : Enemy)

}

BabyCootSpawner ..|> EntitySpawner

abstract class EntitySpawner #EE66B1 {
}

class FastCoot {
- speed : double
- health : int

+ FastCoot(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)

}

class ThickCoot {
- speed : double
- health : int

+ ThickCoot(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
}

Enemy <|.. BabyCoot
Enemy <|.. DerpyCoot
Enemy <|.. MamaCoot
Enemy <|.. FastCoot
Enemy <|.. ThickCoot

enum MovementSpeed {
SLOW
NORMAL
}

@enduml