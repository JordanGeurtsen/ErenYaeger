@startuml BTT_TD_Diagram
class BonkTheTowerTD {

}

BonkTheTowerTD -up-|> YeagerGame
BonkTheTowerTD "1" --> "1" TitleScreen : bonkTheTowerTD
BonkTheTowerTD "1" --> "1" GameScreen : bonkTheTowerTD
BonkTheTowerTD "1" --> "1" FinalScreen : bonkTheTowerTD

abstract class YeagerGame #EE66B1 {

}

enum Screenum {
..Constants..
TITLE (1)
GAME (2)
FINAL (3)
..Private..
- id : int
--
+ Screenum(id : int)
+ getId() : id
}

class GameScreen {
..Static..
+ {static} points : int
..Private..
- bonkTheTowerTD : BonkTheTowerTD
- levelTileMap : LevelTileMap
- roundDefiner : RoundDefiner
- nextRoundButton : NextRoundButton
- towerPrice : int
- newTowerCoordinates : Coordinate2D
- enemyListNr : int
- enemySpawnTimer : int
..Public..
+ enemyList : ArrayList<Enemy>
+ spawnedEnemyList : ArrayList<Enemy>
+ towers : ArrayList<Tower>
+ currentRound : RoundDefiner
+ coinCounter : Counter
+ pointCounter : Counter
+ liveCounter : Counter
+ roundCounter : Counter
+ coins : int
+ lives : int
+ blockSize : int
+ nextRound : boolean

--
+ GameScreen(bonkTheTowerTD : BonkTheTowerTD)
+ spawnEnemy() : void
+ changeTileMap() : void
+ resetStartingVariables() : void
+ gameOver() : void
+ checkEnoughMoney(towerName : String) : boolean
+ addNewTower(towerSelectedName : String) : void
+ resetVariablesPlacingTower(blockNrWidth : int, blockNrHeight : int) : void
+ placeTower(mouseCoordinates : Coordinate2D) : void
}

GameScreen "1" --> "1" LevelTileMap
GameScreen "1" -right-> "0..*" Counter : initialLocation, counterData, text

EntitySpawnerContainer <|.. GameScreen
UpdateExposer <|.. GameScreen
MouseButtonReleasedListener <|.. GameScreen
TileMapContainer <|.. GameScreen

interface EntitySpawnerContainer #EE66B1 {
}

interface UpdateExposer #EE66B1 {
}

interface MouseButtonReleasedListener #EE66B1 {
}

class TitleScreen {
- bonkTheTowerTD : BonkTheTowerTD

+ TitleScreen(bonkTheTowerTD : BonkTheTowerTD)
}

class TextEntity #EE66B1{

}

interface TileMapContainer #EE66B1{

}

abstract class TileMap #EE66B1 {

}


class FinalScreen {
- bonkTheTowerTD : BonkTheTowerTD
- {static} finalMessage : String

+ Finalscreen(bonkTheTowerTD : BonkTheTowerTD)
+ {static} setFinalMessage(finalMessage : String) : void
}

class Title {
+ Title(initialLocation : Coordinate2D, text : String)
}

Title"1" -up-> "1"FinalScreen : initialLocation, text
Title --|> TextEntity

abstract class DynamicScene #EE66B1 {

}

GameScreen --|> DynamicScene
TitleScreen --|> DynamicScene
FinalScreen --|> DynamicScene

class RoundDefiner {
- gameScreen : GameScreen
- startCoordinates : Coordinate2D

+ RoundDefiner(gameScreen : GameScreen)
+ setEnemies(round : Round)

}

enum Round {
..Constants..
ZERO(0)
ONE(1)
TWO(2)
THREE(3)
FOUR(4)
FIVE(5)
..Private..
- id : int
--
+ Round(id : int)
+ getId() : int
+ setNextId() : void
}

GameScreen"1" --> "0..*"Enemy : resource, initialLocation, gameScreen
GameScreen"1" --> "0..*"Tower : resource, initialLocation, gameScreen
RoundDefiner"1" <-- "1"GameScreen : gameScreen

class LevelTileMap {
+ levelMap : int[][]

+ LevelTileMap()
+ changeTile(blockNrWidth : int, blockNrHeight : int, entityIdentifier : int) : void
+ freeSpace(blockNrWidth : int, blockNrHeight : int) : boolean
+ changeTileMap(oldIdentifier : int, newIdentifier : int) : void
}

class TowerGround {
+ TowerGround(initialLocation : Coordinate2D, size : Size, resource : String)
}

class SelectGround{
+ SelectGround(initialLocation : Coordinate2D, size : Size, resource : String)
}

class Water {
+ Water(initialLocation : Coordinate2D, size : Size, resource : String)
}

class Grass {
+ Grass(initialLocation : Coordinate2D, size : Size, resource : String)
}

SpriteEntity <|-- TowerGround
SpriteEntity <|-- SelectGround
SpriteEntity <|-- Water
SpriteEntity <|-- Grass

LevelTileMap"1" -up-> "0..*"Grass : initialLocation, size, resource
LevelTileMap"1" -up-> "0..*"Water : initialLocation, size, resource
LevelTileMap"1" -up-> "0..*"SelectGround : initialLocation, size, resource
LevelTileMap"1" -up-> "0..*"TowerGround : initialLocation, size, resource
LevelTileMap -right-|> TileMap

enum TileIdentifier {
..Constants..
GRASS (1)
WATER (2)
TOWERGROUND (3)
SELECTGROUND (4)
..Private..
- id : int
--
+ TileIdentifier(id : int)
+ getId() : int
}

interface Button {
}

Button -right-|> MouseExitListener
Button -up|> MouseEnterListener
Button -left-|> MouseButtonPressedListener

Button <|.. TextButton
TextButton <|-- QuitButton
TextButton <|-- SceneSwitchButton
TextButton <|-- NextRoundButton

abstract class TextButton {
+ TextButton(initialLocation : Coordinate2D, text : String)
..Abstract..
+ onButtonClick() : void
}

TextButton --|> TextEntity

abstract class CompositeButton {
+ CompositeButton(initialLocation Coordinate2D)
..Abstract..
+ {abstract} onButtonClick() : void
}

CompositeButton <|.right. Button
CompositeButton -|> CompositeEntity

abstract class CompositeEntity #EE66B1 {
}

class BuyButton {
..Private..
- resource : String
- towerName : String
- price : String
- damage : String
- range : String

..Public..
..Static..
+ isTowerSelected : boolean
+ tileMapChanged : boolean
+ currentTowerSelected : String
--
+ BuyButton(initialLocation : Coordinate2D, resource : String, towerName : String, price : int, damage : int, range : int)
+ getBuyButtonTower() : String
}

GameScreen"1" --> "0..*"Button : initialLocation, resource, gameScreen, towerName, price, damage, range
CompositeButton <|-- BuyButton
BuyButton"1" <-- "0..*"HitBox : initialLocation, size
BuyButton"1" <-- "0..*"Sprite : initialLocation, resource, size

class HitBox {
+ HitBox(initialLocation : Coordinate2D, size : Size)
}

HitBox --|> RectangleEntity

abstract class RectangleEntity #EE66B1 {
}

class Sprite {
+ Sprite(initialLocation : Coordinate2D, resource : String, size : Size)
}

SpriteEntity <|-up- Sprite

interface MouseButtonPressedListener #EE66B1 {

}

interface MouseEnterListener #EE66B1 {

}

interface MouseExitListener #EE66B1 {

}

class DynamicTextEntity #EE66B1 {

}

class SceneSwitchButton {
- bonkTheTowerTD : BonkTheTowerTD
- goToScene : int

+ SceneSwitchButton(initialLocation : Coordinate2D, bonkTheTowerTD : BonkTheTowerTD, newScene : Screenum, buttonText :  String)
}

class NextRoundButton {
- newRound : Round
- gameScreen : GameScreen

+ NextRoundButton(initialLocation : Coordinate2D, gameScreen : GameScreen
}

class QuitButton {
- bonkTheTowerTD : BonkTheTowerTD

+ QuitButton(initialLocation : Coordinate2D, bonkTheTowerTD : BonkTheTowerTD)
}

class Counter {
- counterData : int

+ Counter(initialLocation : Coordinate2D, counterData : int, text : String)
+ updateCounter(text : String, counterData : int) : void
}

Counter .|> DynamicTextEntity

abstract class Tower {
..Protected..
# gameScreen : GameScreen
..Private..
- target : Enemy
- shootAngle : double
--
+ Tower(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
+ setShootAngle(shootAngle : double) : void
+ getShootAngle() : double
+ isInRange(rangeRadius : double, e : Enemy) : boolean
+ getTarget(spawnedEnemyList : ArrayList<Enemy>) : Enemy
..Abstract..
+ {abstract} getTowerDamage() : double
+ {abstract} getTowerRange() : double
+ {abstract} getInitialLocation() : Coordinate2D
+ {abstract} getProjectileSpawner() : ProjectileSpawner
}

Tower ..|> UpdateExposer

class Archer {
..Static..
- {static} price : int
- {static} rangeRadius : double
- {static} damage : double
..Private..
- gameScreen : GameScreen
- initialLocation : Coordinate2D
- spawner : ArrowSpawner
--
Archer(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
..Static..
+ {static} getTowerPrice() : int
}

class Hitman {
..Static..
- {static} price : int
- {static} rangeRadius : double
- {static} damage : double
..Private..
- gameScreen : GameScreen
- initialLocation : Coordinate2D
- spawner : ArrowSpawner
--
Hitman(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
..Static..
+ {static} getTowerPrice() : int
}

class Freezer {
..Static..
- {static} price : int
- {static} rangeRadius : double
- {static} damage : double
..Private..
- gameScreen : GameScreen
- initialLocation : Coordinate2D
- spawner : ArrowSpawner
--
Freezer(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
..Static..
+ {static} getTowerPrice() : int
}

Tower <|-up- Archer
Tower <|-up- Hitman
Tower <|-up- Freezer

Tower --|> DynamicSpriteEntity
Enemy --|> DynamicSpriteEntity
Projectile --|> DynamicSpriteEntity

abstract class SpriteEntity #EE66B1 {

}

abstract class DynamicSpriteEntity #EE66B1 {

}

abstract class ProjectileSpawner {
# shootAngle : double

+ ProjectileSpawner(intervalInMs : long)
+ {abstract} setShootAngle(double ShootAngle) : void
}

ProjectileSpawner --|> EntitySpawner

class ArrowSpawner {
- gameScreen : GameScreen
- coordinate2D : Coordinate2D
- shootAngle : double
- needToShoot : boolean
- shootingTower : Tower

+ ArrowSpawner(intervalInMs : long, coordinate2D : Coordinate2D, shootingTower : Tower, gameScreen : GameScreen)
+ setNeedToShoot(shootNeed : boolean) : void
+ shoot(shootAngle : double) : void
}

class BulletSpawner {
- gameScreen : GameScreen
- coordinate2D : Coordinate2D
- shootAngle : double
- needToShoot : boolean
- shootingTower : Tower

+ BulletSpawner(intervalInMs : long, coordinate2D : Coordinate2D, shootingTower : Tower, gameScreen : GameScreen)
+ setNeedToShoot(shootNeed : boolean) : void
+ shoot(shootAngle : double) : void
}

ProjectileSpawner"0..1" --> "1"Tower : intervalInMs, initialLocation, shootingTower, gameScreen
ProjectileSpawner <|-up- ArrowSpawner
ProjectileSpawner <|-up- BulletSpawner

ArrowSpawner"1" -up-> "0..*"Projectile : coordinate2D, shootAngle, gameScreen, shootingTower
BulletSpawner"1" -up-> "0..*"Projectile : coordinate2D, shootAngle, gameScreen, shootingTower

abstract class Projectile {
- gameScreen : gameScreen
- shootingTower : Tower

+ Projectile(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen, shootingTower : Tower, size : Size

}

interface Collider #EE66B1{
}

interface SceneBorderCrossingWatcher #EE66B1 {
}

Projectile <-right- Collided
Projectile <-- SceneBorderCrossingWatcher

class Arrow {
+ Arrow(initialLocation : Coordinate2D, shootAngle : double, gameScreen : GameScreen, shootingTower : Tower)
}

class Bullet {
+ Bullet(initialLocation : Coordinate2D, shootAngle : double, gameScreen : GameScreen, shootingTower : Tower)

}

Projectile <|-up- Arrow
Projectile <|-up- Bullet

abstract class Enemy {
..Public..
+ pathStep : PathStep
..Protected..
# gameScreen : GameScreen
# mapProgress : double
..Private..
- initialLocation : Coordinate2D

--
+ Enemy(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
+ getInitialLocation() : Coordinate2D
+ setPathStep(newPathStep PathStep) : void
+ getPathStep() : PathStep
+ enemyPastBorder(enemy : Enemy, damage : int) : void
+ updateWalkedDistance(distanceWalked : double) : void
+ setMapProgress(mapProgress : double) : void
+ getMapProgress() : double
+ pathLimit(tile : int) : double
+ enemyPath() : void

..Abstract..
+ {abstract} setMovementSpeed(movementSpeed : MovementSpeed) : void
+ {abstract} getMovementSpeed() : double
+ {abstract} setHealth(newHealth double) : void
+ {abstract} getHealth() : int
+ {abstract} getDamage() : int
}

enum PathStep {
ZERO
ONE
TWO
THREE
FOUR
FIVE
SIX
SEVEN
EIGHT
NINE
TEN
ELEVEN
TWELVE
}

interface Collided #EE66B1{

}

Enemy ..|> Collider
Enemy ..|> SceneBorderCrossingWatcher

class BabyCoot {
- speed : double
- health : int

+ BabyCoot(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
}

class DerpyCoot {
- speed : double
- health : int

+ DerpyCoot(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)

}

class MamaCoot {
- speed : double
- health : int
- babyCootSpawner : BabyCootSpawner

+ MamaCoot(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
+ getBabyCootSpawner() : BabyCootSpawner
}

MamaCoot"1" --> "1"BabyCootSpawner : spawnInterval, initialLocation, gameScreen, mamaCoot

class BabyCootSpawner {
- initialLocation : Coordinate2D
- gameScreen : GameScreen
- mamaCoot : Enemy
- needToSpawn : boolean
--
..Public..
+ setNeedToSpawn(state : boolean) : void
..Protected..
# BabyCootSpawner(intervalInMs : long, initialLocation : Coordinate2D, gameScreen : GameScreen, mamaCoot : Enemy)

}

BabyCootSpawner --|> EntitySpawner

abstract class EntitySpawner #EE66B1 {
}

class FastCoot {
- speed : double
- health : int

+ FastCoot(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)

}

class ThickCoot {
- speed : double
- health : int

+ ThickCoot(resource : String, initialLocation : Coordinate2D, gameScreen : GameScreen)
}

Enemy <|-- BabyCoot
Enemy <|-- DerpyCoot
Enemy <|-- MamaCoot
Enemy <|-- FastCoot
Enemy <|-- ThickCoot

enum MovementSpeed {
SLOW
NORMAL
}

@enduml