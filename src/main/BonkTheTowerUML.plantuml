@startuml BTT_TD_Diagram
class BonkTheTowerTD {

}

BonkTheTowerTD .|> YeagerGame
BonkTheTowerTD <-- TitleScreen
BonkTheTowerTD <-- GameScreen
BonkTheTowerTD <-- FinalScreen

abstract class YeagerGame #EE66B1 {

}

class GameScreen {
+earnedPoints : int
+coinBalance : int
}

GameScreen <-- LevelTileMap
GameScreen <-- Counter

class TitleScreen {
- bonkTheTowerTD : BonkTheTowerTD
}

class TextEntity {

}

interface TileMapContainer #EE66B1{

}

abstract class TileMap #EE66B1 {

}

TileMapContainer <|.. GameScreen

class FinalScreen {

}

abstract class DynamicScene #EE66B1 {

}

GameScreen ..|> DynamicScene
TitleScreen ..|> DynamicScene
FinalScreen ..|> DynamicScene

class RoundExecutor {

}

RoundExecutor --> Enemy
RoundExecutor --> GameScreen

class LevelTileMap {
+setEntities() : void
+defineMap() : int[][]
}

LevelTileMap ..|> TileMap
LevelTileMap --> Button

abstract class Button {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void

}

Button .|> MouseExitListener
Button .|> MouseEnterListener
Button .|> MouseButtonPressedListener
Button .|> TextEntity

Button <|.. QuitButton
Button <|.. SceneSwitchButton
Button <|.. BuyButton
Button <|.. NextRoundButton
Button <|.. ChangeRoundState

interface MouseButtonPressedListener #EE66B1 {

}

interface MouseEnterListener #EE66B1 {

}

interface MouseExitListener #EE66B1 {

}

class TextEntity #EE66B1 {

}

class SceneSwitchButton {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class ChangeRoundState {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class BuyButton {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class NextRoundButton {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class QuitButton {
+...() : void
+onMouseEntered() : void
+onMouseExited() : void
}

class Counter {

}

Counter .|> TextEntity

abstract class Tower {
+getPrice() : void
+checkEnoughMoney() : boolean
+setPosition() : void
+getPosition() : void
+selectTarget() : void
+buyItem() : void

+drawTower() : void
}

class Archer {
-price : float
-attackSpeed : int
-attackRange : float
-attackDamage : int

+drawTower() : void
}

class Hitman {
-price : float
-attackSpeed : int
-attackRange : float
-attackDamage : int

+drawTower() : void
}

class Freezer {
-price : float
-attackSpeed : int
-attackRange : float
-attackDamage : int

+drawTower() : void
}

Tower <|.. Archer
Tower <|.. Hitman
Tower <|.. Freezer

Tower ..|> SpriteEntity
Enemy ..|> DynamicSpriteEntity
Projectile .|> DynamicSpriteEntity

abstract class SpriteEntity #EE66B1 {

}

abstract class DynamicSpriteEntity #EE66B1 {

}

abstract class ProjectileSpawner {
}

class ArrowSpawner {
}

class BulletSpawner {
}

ProjectileSpawner --> Tower
ProjectileSpawner <-- ArrowSpawner
ProjectileSpawner <-- BulletSpawner

class Projectile {

}

interface Collider #EE66B1{
}

Projectile ..|>Collider


class Arrow {

}

class Bullet {
}

Projectile <-- Arrow
Projectile <-- Bullet

abstract class Enemy {
-movementSpeed : int
-hitPoints : int

+drawEnemy() : void
+getMovement() : void
+startMovement() : void
}

interface Collided #EE66B1{

}

Enemy ..|> Collided

class BabyCoot {
+drawEnemy() : void
}

class DerpyCoot {
+drawEnemy() : void
}

class MamaCoot {
+drawEnemy() : void
}

class FastCoot {
+drawEnemy() : void
}

class ThickCoot {
+drawEnemy() : void
}

Enemy <|.. BabyCoot
Enemy <|.. DerpyCoot
Enemy <|.. MamaCoot
Enemy <|.. FastCoot
Enemy <|.. ThickCoot

@enduml